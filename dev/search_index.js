var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"AMGSolver\nRLXSolver\nAMGPrecon\nRLXPrecon","category":"page"},{"location":"#AMGCLWrap.AMGSolver","page":"Home","title":"AMGCLWrap.AMGSolver","text":"AMGSolver(sparsematrix; blocksize=1, param=nothing)\n\nCreate Algebraic multigrid preconditioned Krylov subspace solver with ldiv! and \\ methods solving the matrix system.\n\nInput: \n\nsparsematrix: SparseArrays.AbstractSparseMatrixCSC or SparseMatricesCSR.SparseMatrixCSR. \nblocksize: If blocksize >1, group unknowns into blocks of given size and cast the matrix internally to a sparse matrix of        blocksize x blocksize static matrices. Block sizes 1...8 are instantiated.\nparams: Any object (e.g. Tuple, Dict or JSON string) which can be turned into a JSON string by JSON3.write. If params is an emtpy string or nothing a default value is used.\n\n\n\n\n\n","category":"type"},{"location":"#AMGCLWrap.RLXSolver","page":"Home","title":"AMGCLWrap.RLXSolver","text":"RLXSolver(sparsematrix; blocksize=1, param=nothing)\n\nCreate single level relaxation preconditioned Krylov subspace solver with ldiv! and \\ methods solving the matrix system.\n\nInput: \n\nsparsematrix: SparseArrays.AbstractSparseMatrixCSC or SparseMatricesCSR.SparseMatrixCSR. \nblocksize: If blocksize >1, group unknowns into blocks of given size and cast the matrix internally to a sparse matrix of        blocksize x blocksize static matrices. Block sizes 1...8 are instantiated.\nparams: Any object (e.g. Tuple, Dict or JSON string) which can be turned into a JSON string by JSON3.write. If params is an emtpy string or nothing a default value is used.\n\n\n\n\n\n","category":"type"},{"location":"#AMGCLWrap.AMGPrecon","page":"Home","title":"AMGCLWrap.AMGPrecon","text":"AMGPrecon(sparsematrix; blocksize=1, param=nothing)\n\nCreate algebraic multigrid preconditioner with ldiv! and \\ methods solving the preconditioning system.\n\nInput: \n\nsparsematrix: SparseArrays.AbstractSparseMatrixCSC or SparseMatricesCSR.SparseMatrixCSR. \nblocksize: If blocksize >1, group unknowns into blocks of given size and cast the matrix internally to a sparse matrix of        blocksize x blocksize static matrices. Block sizes 1...8 are instantiated.\nparams: Any object (e.g. Tuple, Dict or JSON string) which can be turned into a JSON string by JSON3.write. If params is an emtpy string or nothing a default value is used.\n\n\n\n\n\n","category":"type"},{"location":"#AMGCLWrap.RLXPrecon","page":"Home","title":"AMGCLWrap.RLXPrecon","text":"RLXPrecon(sparsematrix; blocksize=1, param=nothing)\n\nCreate single level relaxation preconditioner with ldiv! and \\ methods solving the preconditioning system.\n\nInput: \n\nsparsematrix: SparseArrays.AbstractSparseMatrixCSC or SparseMatricesCSR.SparseMatrixCSR. \nblocksize: If blocksize >1, group unknowns into blocks of given size and cast the matrix internally to a sparse matrix of        blocksize x blocksize static matrices. Block sizes 1...8 are instantiated.\nparams: Any object (e.g. Tuple, Dict or JSON string) which can be turned into a JSON string by JSON3.write. If params is an emtpy string or nothing a default value is used.\n\n\n\n\n\n","category":"type"}]
}
